<?xml version="1.0" encoding="UTF-8"?>
<!--
  Lecture2Go-License
  The Lecture2Go software is based on the liferay portal 6.2-ga6
  <http://www.liferay.com>
  
  Lecture2Go <http://lecture2go.uni-hamburg.de> is an open source
  platform for media management and distribution. Our goal is to
  support the free access to knowledge because this is a component
  of each democratic society. The open source software is aimed at
  academic institutions and has to strengthen the blended learning.
  
  All Lecture2Go plugins are continuously being developed and improved.
  For more details please visit <http://lecture2go-open-source.rrz.uni-hamburg.de>
  
  Copyright (c) 2013 - present University of Hamburg / Computer and Data Center (RRZ)
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
  
  +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ 
  
  Third Party Software
  
  Lecture2Go uses third-party libraries which may be distributed under different licenses to 
  the above (but are compatible with the used GPL license). Informations about these licenses 
  and copyright informations are mostly detailed in the library source code or jars themselves. 
  You must agree to the terms of these licenses, in addition to  the above Lecture2Go 
  source code license, in order to use this software. 
  
  +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ 
  
  Apache 2.0
  Licensed under the Apache License, Version 2.0 (the "License"); 
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, 
  software distributed under the License is distributed on an "AS IS" BASIS, 
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  
  See the License for the specific language governing permissions and limitations under the License.
  
  +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ 
  
  BSD
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
  1. Redistributions of source code must retain the above copyright notice, 
  this list of conditions and the following disclaimer.
  
  2. Redistributions in binary form must reproduce the above copyright notice, 
  this list of conditions and the following disclaimer in the documentation 
  and/or other materials provided with the distribution.
  
  3. Neither the name of the copyright holder nor the names of its contributors 
  may be used to endorse or promote products derived from this software without 
  specific prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER 
  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  
  +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ 
  
  Eclipse Public License
  This program and the accompanying materials are made
  available under the terms of the Eclipse Public License 2.0
  which is available at https://www.eclipse.org/legal/epl-2.0/
  
  SPDX-License-Identifier: EPL-2.0
  
  +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ 
  
  JSON License
  
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
  associated documentation files (the "Software"), to deal in the Software without restriction, 
  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
  subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in all copies or 
  substantial portions of the Software.
  
  The Software shall be used for Good, not Evil.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
  AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ +++ 
  
  MIT
  
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
  and associated documentation files (the "Software"), to deal in the Software without restriction, 
  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
  subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in all copies or substantial 
  portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
  AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<custom-sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.InstitutionFinder.findRootInstitutionsByOpenAccessVideos">
		<![CDATA[
			SELECT distinct i2.* FROM LG_Video v JOIN LG_Video_Institution vi ON v.videoId=vi.videoId JOIN LG_Institution i ON vi.institutionId= i.institutionId JOIN (SELECT * FROM LG_Institution) i2 ON i.parentId=i2.institutionId WHERE v.openAccess=1 ORDER BY sort
		]]>
    </sql>
    
    <sql id="de.uhh.l2g.plugins.service.persistence.VideoFinder.findPopularVideos">
		<![CDATA[
			SELECT v.* 
			FROM LG_Video v, LG_Videohitlist vhl  
			WHERE v.videoId=vhl.videoId 
			ORDER BY hitsPerDay DESC 
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.VideoFinder.findVideosByHitsAndOpenAccess">
		<![CDATA[
			SELECT v.* 
			FROM LG_Video v  
			WHERE hits>? AND openAccess=1 
			ORDER BY hits DESC 
		]]>
    </sql>
        
    <sql id="de.uhh.l2g.plugins.service.persistence.VideoFinder.findVideosByHits">
		<![CDATA[
			SELECT v.* 
			FROM LG_Video v  
			WHERE hits>? 
			ORDER BY hits DESC 
		]]>
    </sql>
    
    <sql id="de.uhh.l2g.plugins.service.persistence.VideoFinder.findVideoStatistics">
		<![CDATA[
			SELECT * FROM LG_VideoStatistic;  
		]]>
    </sql>
    
    <sql id="de.uhh.l2g.plugins.service.persistence.VideoFinder.findVideosBySearchWordAndLectureseriesId">
		<![CDATA[
						SELECT v.* 
						FROM LG_Video v 
						INNER JOIN LG_Tagcloud as tag ON (v.videoId = tag.objectId) 
						WHERE objectClassType="de.uhh.l2g.plugins.model.impl.VideoImpl" 
						AND tag.tags LIKE ? 
						AND v.lectureseriesId=? 
						AND v.openAccess=1
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.VideoFinder.findAllSearchWords">
		<![CDATA[
			SELECT DISTINCT LG_Video.* , LG_Lectureseries.name AS lectureseriesName, LG_Lectureseries.number_ AS lectureseriesNumber, LG_Creator.fullName AS creatorFullName
			FROM LG_Video, LG_Metadata, LG_Lectureseries, LG_Institution, LG_Creator,  LG_Video_Creator
			WHERE (
				( 
					LG_Video.openAccess=1 AND 
			        LG_Video.metadataId = LG_Metadata.metadataId AND 
			        (LG_Video.lectureseriesId = LG_Lectureseries.lectureseriesId OR LG_Video.lectureseriesId < 0) AND  
			        LG_Video.rootInstitutionId=LG_Institution.institutionId AND
			        LG_Video.videoId = LG_Video_Creator.videoId AND 
			        LG_Creator.creatorId = LG_Video_Creator.creatorId
				) 
			    AND 
			    ( 
					( LG_Video.title > "" ) OR 
			        ( LG_Lectureseries.name > "" ) OR 
			        ( LG_Video.tags > "" ) OR 
			        ( LG_Lectureseries.number_ > "" ) OR
			        ( LG_Creator.fullName > "" )
				)
			) 
			GROUP BY LG_Video.videoId ORDER BY LG_Video.generationDate DESC
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistences.VideoFinder.findVideosBySearchWord">
		<![CDATA[
			SELECT DISTINCT LG_Video.* , LG_Lectureseries.name AS lectureseriesName, LG_Lectureseries.number_ AS lectureseriesNumber, LG_Creator.fullName AS creatorFullName
			FROM LG_Video, LG_Metadata, LG_Lectureseries, LG_Institution, LG_Creator,  LG_Video_Creator
			WHERE (
				( 
					LG_Video.openAccess=1 AND 
			        LG_Video.metadataId = LG_Metadata.metadataId AND 
			        LG_Video.lectureseriesId = LG_Lectureseries.lectureseriesId AND 
			        LG_Video.rootInstitutionId=LG_Institution.institutionId AND
			        LG_Video.videoId = LG_Video_Creator.videoId AND 
			        LG_Creator.creatorId = LG_Video_Creator.creatorId
				) 
			    AND 
			    ( 
					( LG_Video.title LIKE ? ) OR 
			        ( LG_Lectureseries.name LIKE ? ) OR 
			        ( LG_Video.tags LIKE ? ) OR 
			        ( LG_Lectureseries.number_ LIKE ? ) OR
			        ( LG_Creator.fullName LIKE ? )
				)
			) 
			ORDER BY LG_Video.generationDate DESC
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.InstitutionFinder.findAllSortedAsTree">
		<![CDATA[
			SELECT myNode.institutionId, myNode.parentId, myNode.name, myNode.typ, myNode.www, myNode.level, myNode.sort,
			IF(myParent.institutionId>=0, IF(myGrandparent.institutionId>=0,
			CONCAT(myGrandparent.institutionId, '/', myParent.institutionId, '/', myNode.institutionId),
			CONCAT('', myParent.institutionId, '/', myNode.institutionId)),
			CONCAT( myNode.institutionId, '')) AS path
			FROM LG_Institution AS myNode
			LEFT JOIN LG_Institution AS myParent ON myNode.parentId = myParent.institutionId
			LEFT JOIN LG_Institution AS myGrandparent ON myParent.parentId = myGrandparent.institutionId
			ORDER BY path ASC
		]]>
    </sql>

        <sql id="de.uhh.l2g.plugins.service.persistence.InstitutionFinder.findMaxSortByParent">
		<![CDATA[
			SELECT MAX(sort) as maxsort FROM LG_Institution WHERE parentId = ?;
		]]>
    </sql>

        <sql id="de.uhh.l2g.plugins.service.persistence.InstitutionFinder.findLockingElements">
		<![CDATA[
			SELECT COUNT(*) as countElements FROM LG_Institution as Inst
			NATURAL JOIN
			(
			(SELECT institutionId FROM LG_Lectureseries_Institution AS Lec)
				UNION
			(SELECT institutionId FROM LG_Video_Institution AS Vid)
				UNION
			(SELECT institutionId FROM LG_Coordinator AS Coo)
				UNION
			(SELECT institutionId FROM LG_Producer AS Pro)
				UNION
			(SELECT parentId as institutionId FROM LG_Institution AS Child)
			 )
			AS contents
			WHERE Inst.institutionId = ?
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.InstitutionFinder.findByLectureseriesId">
		<![CDATA[
			SELECT LG_Institution.institutionId, LG_Institution.parentId, LG_Institution.name, LG_Institution.typ, LG_Institution.www, LG_Institution.level, LG_Institution.sort
			FROM LG_Institution, LG_Lectureseries_Institution
			WHERE (LG_Lectureseries_Institution.lectureseriesId=? AND LG_Institution.institutionId=LG_Lectureseries_Institution.institutionId)
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.LectureseriesFinder.findAllLectureseriesWithOpenAccessVideos">
		<![CDATA[
			SELECT number_, eventType, categoryId, l.name, shortDesc, l.termId, language, facultyName, l.lectureseriesId, l.password_, approved, longDesc, latestOpenAccessVideoId, l.videoSort, l.USID, l.previewVideoId  
			FROM LG_Lectureseries l, LG_Video v, LG_Video_Institution vi, LG_Institution i
			WHERE ( l.lectureseriesId=v.lectureseriesId AND v.openAccess=1 AND v.videoId=vi.videoId AND vi.institutionId=i.institutionId)
			GROUP BY l.lectureseriesId
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.LectureseriesFinder.findAllLectureseriesWithPassword">
		<![CDATA[
			SELECT number_, eventType, categoryId, l.name, shortDesc, termId, language, facultyName, l.lectureseriesId, password_, approved, longDesc, latestOpenAccessVideoId, l.videoSort, l.USID, l.previewVideoId  
			FROM LG_Lectureseries l
			WHERE l.password_>""
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.ProducerFinder.findProducerIds">
		<![CDATA[
			SELECT p.producerId
			FROM  LG_Producer_Lectureseries AS pc
			INNER JOIN LG_Producer AS p ON pc.producerId = p.producerId
			WHERE pc.lectureseriesId = ?
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.VideoFinder.findVideoForSecureUrl">
		<![CDATA[
			SELECT videoId FROM LG_Video WHERE secureFilename LIKE ?
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.VideoFinder.findLatestOpenAccessVideoForlectureseries">
		<![CDATA[
			SELECT videoId FROM LG_Video
			WHERE (generationDate=(SELECT MAX(generationDate) FROM LG_Video WHERE lectureseriesId=? AND openAccess=1) AND lectureseriesId=? AND openAccess=1)
			ORDER BY videoId ASC
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.VideoFinder.resetLectureseriesForVideos">
		<![CDATA[
			UPDATE LG_Video SET lectureseriesId=0 WHERE lectureseriesId=?
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.CreatorFinder.findCreatorsForLectureseries">
		<![CDATA[
			SELECT c.* FROM LG_Creator c, LG_Lectureseries_Creator lc WHERE c.creatorId=lc.creatorId AND lc.lectureseriesId = ?
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.CreatorFinder.findCreatorsForLectureseriesOverTheAssigenedVideos">
		<![CDATA[
			SELECT c.* FROM LG_Video_Creator vc 
			INNER JOIN LG_Creator c ON c.creatorId=vc.creatorId 
			WHERE videoId IN (SELECT videoId FROM LG_Video WHERE lectureseriesId = ?) 
			GROUP BY creatorId;
		]]>
    </sql>

    <sql id="de.uhh.l2g.plugins.service.persistence.CreatorFinder.findCreatorsForVideo">
		<![CDATA[
			SELECT c.* FROM LG_Creator c, LG_Video_Creator vc WHERE c.creatorId=vc.creatorId AND vc.videoId = ?
		]]>
    </sql>
    
    <sql id="de.uhh.l2g.plugins.service.persistence.StatisticFinder.removeVideoStatisticTable">
		<![CDATA[
			DROP TABLE IF EXISTS LG_VideoStatistic
		]]>
	</sql>
		
	<sql id="de.uhh.l2g.plugins.service.persistence.StatisticFinder.createVideoStatisticView">
		<![CDATA[
			CREATE OR REPLACE VIEW LG_VideoStatistic AS 
			SELECT 
			   publicVideos AS public, privateVideos AS private, (publicVideos+privateVideos) as total, createDate as date, 
			   (SELECT CASE DATEDIFF(NOW(),date) WHEN 0 THEN 0 WHEN 1 THEN "DAY" WHEN 7 THEN "WEEK" WHEN 31 THEN "MONTH" WHEN 365 THEN "YEAR" END) AS timespan, 
			   (SELECT COUNT(*) FROM LG_Video WHERE openAccess = 1 AND filename > '') - publicVideos AS publicDiff, 
			   (SELECT COUNT(*) FROM LG_Video WHERE openAccess = 0 AND filename > '') - privateVideos AS privateDiff, 
			   (publicVideos + privateVideos) AS totalDiff 
			FROM LG_Statistic 
			GROUP BY timespan;
		]]>
    </sql>
		
	<sql id="de.uhh.l2g.plugins.service.persistence.StatisticFinder.getAllStatistics">
		<![CDATA[
			SELECT * FROM LG_VideoStatistic WHERE total > 0;
		]]>
    </sql>
    
    <sql id="de.uhh.l2g.plugins.service.persistence.OaiRecordFinder.findEarliestDatestamp">
		<![CDATA[
			SELECT MIN(datestamp) as earliestDatestamp FROM LG_OaiRecord;
		]]>
    </sql>
    
     <sql id="de.uhh.l2g.plugins.service.persistence.OaiSetFinder.findByOaiRecord">
		<![CDATA[
			SELECT s.* FROM LG_OaiSet s JOIN LG_OaiRecord_OaiSet rs ON s.oaiSetId=rs.oaiSetId WHERE rs.oaiRecordId = ?
		]]>
    </sql>
    	
</custom-sql>
